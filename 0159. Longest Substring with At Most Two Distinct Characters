"""
Given a string s , find the length of the longest substring t  that contains at most 2 distinct characters.

Example 1:

Input: "eceba"
Output: 3
Explanation: t is "ece" which its length is 3.
Example 2:

Input: "ccaabbb"
Output: 5
Explanation: t is "aabbb" which its length is 5.
"""

"""
Very typical Two Pointer Sliding Window problem. We have the following steps for this type of prolem:
1. Increment the right pointer and do the book keeping.
2. Shrink the left pointer to meet the requirement.
3. Update current optimal solution.

Two Pointer + Hash Table. 1 Pass. Time: O(n), Space: O(n).
"""
from collections import defaultdict
class Solution(object):
    def lengthOfLongestSubstringTwoDistinct(self, s):
        """
        :type s: str
        :rtype: int
        """
        left = 0
        hist = defaultdict(int)
        count = 0 # count the number of indistinct characters
        res = 0
        for right in range(len(s)):
            hist[s[right]] += 1
            if hist[s[right]] == 1:
                # new character
                count += 1
            while count > 2:
                hist[s[left]] -= 1
                if hist[s[left]] == 0:
                    count -= 1
                left += 1
            
            res = max(res, right-left+1)
        
        return res
